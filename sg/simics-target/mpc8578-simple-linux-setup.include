if not defined do_boot       {$do_boot = "yes"}
if not defined uboot         {$uboot         = "u-boot-smp.bin"}
if not defined kernel_image  {$kernel_image  = "linux-2.6.21"}
if not defined kernel_addr   {$kernel_addr   = 0x1000000}
if not defined initrd_image  {$initrd_image  = "busybox-1.1.3.u-boot"}
if not defined initrd_addr   {$initrd_addr   = 0x1300000}
if not defined dev_tree_blob {$dev_tree_blob = "mpc8572.dtb"}
if not defined dev_tree_addr {$dev_tree_addr = 0x00f00000}
if not defined boot_command  {$boot_command  = "bootm 0x1000000 0x1300000 0xf00000"}
if not defined mac_address   {$mac_address   = "00:01:af:07:9b:8a"}
if not defined mac_address1  {$mac_address1  = "00:01:af:07:9b:8b"}
if not defined mac_address2  {$mac_address2  = "00:01:af:07:9b:8c"}
if not defined mac_address3  {$mac_address3  = "00:01:af:07:9b:8d"}
if not defined ip_address    {$ip_address    = "10.10.0.80"}
if not defined ip_address1   {$ip_address1   = "10.10.0.81"}
if not defined ip_address2   {$ip_address2   = "10.10.0.82"}
if not defined ip_address3   {$ip_address3   = "10.10.0.83"}
if not defined host_name     {$host_name     = "mpc8572"}
if not defined service_node  {}
if not defined kernel_symbols {$kernel_symbols = ""}
if not defined uboot_symbols  {$uboot_symbols = ""}
if not defined kernel_cmdline {$kernel_cmdline = "console=ttyS1,115200 simicsfs=0xeff00000"}
if not defined system_info    {$system_info = $host_name + " - Linux 2.6.x (IP " + $ip_address + ")" }

###
$system->system_info = $system_info

if $service_node {
    local $sn = ($service_node:sn)
    ($sn.add-host name = $host_name
                         ip = $ip_address domain = network.sim
                         mac = $mac_address)
}

default-port-forward-target $ip_address

$phys_mem = ($system:phys_mem)
$phys_mem.load-file $uboot 0xfff80000


# U-boot uses l1 cache without backing RAM
#($phys_mem.add-map
#        ($system:l1_cache)
#        base = 0xe4010000 length = 0x4000
#        priority = 200 offset = 0xe4010000)

($phys_mem.add-map
        ($system.get-component-object l1_cache)
        base = 0xffd00000 length = 0x4000
        priority = 200 offset = 0xffd00000)


# U-boot symbols
if $uboot_symbols != "" {
        local $syms = (lookup-file $uboot_symbols)
        new-symtable uboot file = $syms
}

# Kernel symbols
if $kernel_symbols != "" {
        local $syms = (lookup-file $kernel_symbols)
        new-symtable kernel file = $syms
}

if $do_boot == "yes" {
    script-branch {
	local $con          = ($console:con)
        local $phys_mem     = ($system:phys_mem)

        local $initrd_image = $initrd_image
        local $initrd_addr  = $initrd_addr
        local $kernel_image = $kernel_image
        local $kernel_addr  = $kernel_addr
        local $boot_command = $boot_command
        local $cmdline      = $kernel_cmdline
        local $mac_address  = $mac_address
        local $mac_address1 = $mac_address1
        local $mac_address2 = $mac_address2
        local $mac_address3 = $mac_address3
        local $ip_address   = $ip_address
        local $ip_address1  = $ip_address1
        local $ip_address2  = $ip_address2
        local $ip_address3  = $ip_address3
        local $dev_tree_blob= $dev_tree_blob
        local $dev_tree_addr= $dev_tree_addr

        $con.wait-for-string "autoboot:"
        $con.input "\n"

        # u-boot does not read the MAC from the PHY, but reads them directly
        # from it's environment variables.

        # First ethernet interface
        $con.wait-then-write "=> " "setenv ethaddr " + $mac_address + "\n"
        $con.wait-then-write "=> " "setenv ipaddr " + $ip_address + "\n"

        # Looks like u-boot does not set MAC1-3 correctly

        # Second ethernet interface
        $con.wait-then-write "=> " "setenv eth1addr " + $mac_address1 + "\n"
        $con.wait-then-write "=> " "setenv ip1addr " + $ip_address1 + "\n"

        # Third ethernet interface
        $con.wait-then-write "=> " "setenv eth2addr " + $mac_address2 + "\n"
        $con.wait-then-write "=> " "setenv ip2addr " + $ip_address2 + "\n"

        # Fourth, and last, ethernet interface
        $con.wait-then-write "=> " "setenv eth3addr " + $mac_address3 + "\n"
        $con.wait-then-write "=> " "setenv ip3addr " + $ip_address3 + "\n"

        if $service_node {
                $con.wait-then-write "=> " "setenv gatewayip 10.10.0.1\n"
                $con.wait-then-write "=> " "setenv serverip 10.10.0.1\n"
        }

        # Boot the linux kernel
        $con.wait-for-string "=> "
        $phys_mem.load-file $kernel_image $kernel_addr
        $phys_mem.load-file $initrd_image $initrd_addr
        # Load flat device tree blob
        if ($dev_tree_blob != "") {
            # Must load to address covered by initial TLB entry
            $phys_mem.load-file $dev_tree_blob $dev_tree_addr
        }
	$con.input "# images has been forced into memory\n"

        if ($cmdline != "") {
            $con.wait-then-write "=> " "setenv bootargs " + $cmdline + "\n"
        }

        # Note: user must override boot_command if dev_tree_blob is set
	$con.wait-then-write "=> " "setenv bootcmd " + $boot_command + "\n"
	$con.wait-then-write "=> " "boot\n"
    }
}
